version: '3.8'
services:
  config-service:
    image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/config-service:latest # ECR에 push한 이미지 이름
    container_name: config-service
    ports:
      - "8888:8888"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://13.125.204.207:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - msa-network
    restart: always

  discovery-service:
    image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/discoveryservice:latest # ECR에 push한 이미지 이름
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - msa-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://http://13.125.204.207:8761"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  gateway-service:
    image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/gateway-service:latest # ECR에 push한 이미지 이름
    container_name: gateway-service
    ports:
      - "8000:8000"
    networks:
      - msa-network
    depends_on:
      discovery-service:
          condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  user-service:
    image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:latest # ECR에 push한 이미지 이름
    container_name: user-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  order-service:
    image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/ordering-service:latest # ECR에 push한 이미지 이름
    container_name: order-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  product-service:
    image: 872651651829.dkr.ecr.ap-northeast-2.amazonaws.com/product-service:latest # ECR에 push한 이미지 이름
    container_name: product-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  redis:
    image: redis:latest
    ports:
      - '6379:6379'

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP 포트
      - "15672:15672" # 관리 UI 포트
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - msa-network


networks:
  msa-network:
    driver: bridge # Docker의 기본 네트워크 드라이버. 동일한 호스트 내에서 통신할 수 있도록 설정.





